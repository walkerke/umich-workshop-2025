---
title: "Analyzing Data from the 2023 American Community Survey in R"
author: "Kyle Walker"
date: February 5, 2025
lightbox: true
format: 
  revealjs: 
    theme: [default, custom.scss]
    embed-resources: true
    logo: img/logo.png
execute: 
  echo: true
---
```{r setup, include = FALSE}
options(tigris_use_cache = TRUE)
```


## About me

* Professor of Geography at TCU 

* Spatial data science researcher and consultant

* Package developer: __tidycensus__, __tigris__, __mapgl__, __mapboxapi__, __crsuggest__, __idbr__ (R), __pygris__ (Python)

* Book: [_Analyzing US Census Data: Methods, Maps and Models in R_](https://walker-data.com/census-r/)


## SSDAN webinar series

* __Today: Analyzing Data from the 2023 American Community Survey in R__

* Wednesday, February 12th: Working with Decennial Census Data in R

* Wednesday, February 26th: Mapping and Spatial Analysis with US Census Data in R

## Today's agenda

* Hour 1: The American Community Survey, R, and tidycensus

* Hour 2: ACS data workflows

* Hour 3: An introduction to ACS microdata

# The American Community Survey, R, and tidycensus

## What is the ACS?

* Annual survey of 3.5 million US households 

* Covers topics not available in decennial US Census data (e.g. income, education, language, housing characteristics)

* Available as 1-year estimates (for geographies of population 65,000 and greater) and 5-year estimates (for geographies down to the block group)

* Data delivered as _estimates_ characterized by _margins of error_

## How to get ACS data

* [data.census.gov](https://data.census.gov) is the main, revamped interactive data portal for browsing and downloading Census datasets, including the ACS

* [The US Census **A**pplication **P**rogramming **I**nterface (API)](https://www.census.gov/data/developers/data-sets.html) allows developers to access Census data resources programmatically

## tidycensus

:::: {.columns}

::: {.column width="70%"}

* R interface to the Decennial Census, American Community Survey, Population Estimates Program, and Public Use Microdata Series APIs

* First released in 2017; nearly 600,000 downloads from the Posit CRAN mirror

:::

::: {.column width="30%"}

![](https://walker-data.com/tidycensus/logo.png)

:::

::::

## tidycensus: key features

::: {.incremental}

- Wrangles Census data internally to return tidyverse-ready format (or traditional wide format if requested);

- Automatically downloads and merges Census geometries to data for mapping; 

- Includes tools for handling margins of error in the ACS and working with survey weights in the ACS PUMS;

- States and counties can be requested by name (no more looking up FIPS codes!)
  
:::

## R and RStudio

* R: programming language and software environment for data analysis (and wherever else your imagination can take you!)

* RStudio: integrated development environment (IDE) for R developed by [Posit](https://posit.co/)

* Posit Cloud: run RStudio with today's workshop pre-configured at https://posit.cloud/content/9689451


## Getting started with tidycensus

* To get started, install the packages you'll need for today's workshop

* If you are using the Posit Cloud environment, these packages are already installed for you

```{r install-packages, eval = FALSE}
install.packages(c("tidycensus", "tidyverse"))
```

* Optional, to run advanced examples:

```{r advanced-packages, eval = FALSE}
install.packages(c("mapview", "survey", "srvyr", "arcgislayers"))
```


## Optional: your Census API key

* tidycensus (and the Census API) can be used without an API key, but you will be limited to 500 queries per day

* Power users: visit https://api.census.gov/data/key_signup.html to request a key, then activate the key from the link in your email. 

* Once activated, use the `census_api_key()` function to set your key as an environment variable

* __As of February 2025, the API key service appears to be unavailable__

```{r api-key, eval = FALSE}
library(tidycensus)

census_api_key("YOUR KEY GOES HERE", install = TRUE)
```

# Getting started with ACS data in tidycensus


## Using the `get_acs()` function

* The `get_acs()` function is your portal to access ACS data using tidycensus

* The two required arguments are `geography` and `variables`.  As of v1.7.1, the function defaults to the 2019-2023 5-year ACS

```{r acs}
library(tidycensus)

median_value <- get_acs(
  geography = "county",
  variables = "B25077_001",
  year = 2023
)
```

---

* ACS data are returned with five columns: `GEOID`, `NAME`, `variable`, `estimate`, and `moe`

```{r view-acs}
median_value
```


## 1-year ACS data

* 1-year ACS data are more current, but are only available for geographies of population 65,000 and greater

* Access 1-year ACS data with the argument `survey = "acs1"`; defaults to `"acs5"`

```{r acs-1-year}
#| code-line-numbers: "|5"

median_value_1yr <- get_acs(
  geography = "place",
  variables = "B25077_001",
  year = 2023,
  survey = "acs1"
)
```

---


```{r view-acs-1yr}
median_value_1yr
```


## Requesting tables of variables

* The `table` parameter can be used to obtain all related variables in a "table" at once

```{r census-table}
#| code-line-numbers: "|3"

income_table <- get_acs(
  geography = "county", 
  table = "B19001", 
  year = 2023
)
```

---

```{r view-table}
income_table
```


# Understanding geography and variables in tidycensus

---

## US Census Geography

![Source: US Census Bureau](img/census_diagram.png)


---

## Geography in tidycensus

* Information on available geographies, and how to specify them, can be found [in the tidycensus documentation](https://walker-data.com/tidycensus/articles/basic-usage.html#geography-in-tidycensus-1)

![](img/tidycensus_geographies.png){width=400}


---

## Querying by state

* For geographies available below the state level, the `state` parameter allows you to query data for a specific state

* For smaller geographies (Census tracts, block groups), a `county` can also be requested

* __tidycensus__ translates state names and postal abbreviations internally, so you don't need to remember the FIPS codes!

* Example: data on median home value in San Diego County, California by Census tract

---

```{r query-by-state}
#| code-line-numbers: "|4|5"

sd_value <- get_acs(
  geography = "tract", 
  variables = "B25077_001", 
  state = "CA", 
  county = "San Diego",
  year = 2023
)
```

---

```{r show-query-by-state}
sd_value
```


## Searching for variables

* To search for variables, use the `load_variables()` function along with a year and dataset

* The `View()` function in RStudio allows for interactive browsing and filtering

```{r search-variables, eval = FALSE}
vars <- load_variables(2023, "acs5")

View(vars)

```

---

## Available ACS datasets in tidycensus

* Detailed Tables 

* Data Profile (add `"/profile"` for variable lookup)

* Subject Tables (add `"/subject"`)

* Comparison Profile (add `"/cprofile"`)

* Supplemental Estimates (use `"acsse"`)

* Migration Flows (access with `get_flows()`)

---
class: middle, center, inverse

## Data structure in tidycensus

---

## "Tidy" or long-form data

:::: {.columns}

::: {.column width="40%"}

* The default data structure returned by __tidycensus__ is "tidy" or long-form data, with variables by geography stacked by row

:::

::: {.column width="60%"}


```{r tidy-data}
age_sex_table <- get_acs(
  geography = "state", 
  table = "B01001", 
  year = 2023,
  survey = "acs1",
)

```

:::

::::

---

```{r show-tidy-data}
age_sex_table
```



## "Wide" data 

:::: {.columns}

::: {.column width="40%"}

* The argument `output = "wide"` spreads Census variables across the columns, returning one row per geographic unit and one column per variable

:::

::: {.column width="60%"}

```{r wide-data}
#| code-line-numbers: "|6"

age_sex_table_wide <- get_acs(
  geography = "state", 
  table = "B01001", 
  year = 2023,
  survey = "acs1",
  output = "wide" 
)
```

:::

::::


---

```{r show-wide-data}
age_sex_table_wide
```



## Using named vectors of variables


* Census variables can be hard to remember; using a named vector to request variables will replace the Census IDs with a custom input

* In long form, these custom inputs will populate the `variable` column; in wide form, they will replace the column names

---

```{r named-variables}
#| code-line-numbers: "|4|5|6"

ca_education <- get_acs(
  geography = "county",
  state = "CA",
  variables = c(percent_high_school = "DP02_0062P", 
                percent_bachelors = "DP02_0065P",
                percent_graduate = "DP02_0066P"), 
  year = 2023
)
```


---

```{r show-named-variables}
ca_education
```


---

## Part 1 exercises

1. Use the `load_variables()` function to find a variable that interests you that we haven't used yet.  

2. Use `get_acs()` to fetch data on that variable from the ACS for counties, similar to how we did for median household income.

# Part 2: ACS data workflows

## Understanding limitations of the 1-year ACS

* The 1-year American Community Survey is only available for geographies with population 65,000 and greater.  This means: 

::: {.incremental}

- Only 854 of 3,222 counties are available
- Only 649 of 32,325 cities / Census-designated places are available
- No data for Census tracts, block groups, ZCTAs, or any other geographies that typically have populations below 65,000

:::


## Data sparsity and margins of error

* You may encounter data issues in the 1-year ACS data that are less pronounced in the 5-year ACS.  For example: 

::: {.incremental}
* Values available in the 5-year ACS may not be available in the corresponding 1-year ACS tables

* If available, they will likely have larger margins of error

* Your job as an analyst: balance need for _certainty_ vs. need for _recency_ in estimates

:::

## Example: Punjabi speakers by state (1-year ACS)

```{r}
get_acs(
  geography = "state",
  variables = "B16001_054",
  year = 2023,
  survey = "acs1"
)
```

## Punjabi speakers by state (5-year ACS)

```{r}
get_acs(
  geography = "state",
  variables = "B16001_054",
  year = 2023,
  survey = "acs5"
)
```


# Visualizing ACS data

## Visualizing ACS estimates

* As opposed to decennial US Census data, ACS estimates include information on uncertainty, represented by the _margin of error_ in the `moe` column

* This means that in some cases, visualization of estimates without reference to the margin of error can be misleading

* Walkthrough: building a margin of error visualization with __ggplot2__

---

## Visualizing ACS estimates

* Let's get some data on median household income by county in Utah

```{r nj-income}
utah_income <- get_acs(
  geography = "county",
  variables = "B19013_001",
  state = "UT",
  year = 2023
) 
```

---

## A basic plot

* To visualize a dataset with __ggplot2__, we define an _aesthetic_ and a _geom_

```{r ut-basic-plot}
library(ggplot2)

utah_plot <- ggplot(utah_income, aes(x = estimate, y = NAME)) + 
  geom_point()
```

---

```{r}
utah_plot
```


## Problems with our basic plot

* The data are not sorted by value, making comparisons difficult

* The axis and tick labels are not intuitive

* The Y-axis labels contain repetitive information (" County, Utah")

* We've made no attempt to customize the styling

---

## Sorting by value

* We use `reorder()` to sort counties by the value of their ACS estimates, improving legibility

```{r md-plot-sorted}
#| code-line-numbers: "|2"

utah_plot <- ggplot(utah_income, aes(x = estimate, 
                                y = reorder(NAME, estimate))) + 
  geom_point(color = "darkblue", size = 2)
```

---

```{r second-plot, echo = FALSE, out.width = "800px"}
utah_plot
```


---

## Cleaning up tick labels

* Using a combination of functions in the __scales__ package and custom-defined functions, tick labels can be formatted any way you want

```{r md-plot-labels-cleaned}
#| code-line-numbers: "|5|6"

library(scales)
library(stringr)

utah_plot <- utah_plot + 
  scale_x_continuous(labels = label_dollar()) + 
  scale_y_discrete(labels = function(x) str_remove(x, " County, Utah")) 
```

---

```{r third-plot, echo = FALSE, out.width = "800px", eval = TRUE}
utah_plot
```


---

## Improving formatting and theming

* Use `labs()` to label the plot and its axes, and change the theme to one of several built-in options

```{r md-plot-formatted}
utah_plot <- utah_plot + 
  labs(title = "Median household income, 2019-2023 ACS",
       subtitle = "Counties in Utah",
       caption = "Data acquired with R and tidycensus",
       x = "ACS estimate",
       y = "") + 
  theme_minimal(base_size = 12)
```

---

```{r fourth-plot, echo = FALSE, out.width = "800px", eval = TRUE}
utah_plot
```

---

## Problem: comparing ACS estimates

* The chart suggests that Juab County has lower income than Salt Lake County but its margin of error is quite large

```{r head-nj-income, eval = FALSE}
View(utah_income)
```

* How to visualize uncertainty in an intuitive way?

---

## Visualizing margins of error

```{r utah-income-errorbar}
utah_plot_errorbar <- ggplot(utah_income, aes(x = estimate, 
                                        y = reorder(NAME, estimate))) + 
  geom_errorbar(aes(xmin = estimate - moe, xmax = estimate + moe), #<<
                width = 0.5, linewidth = 0.5) + #<<
  geom_point(color = "darkblue", size = 2) + 
  scale_x_continuous(labels = label_dollar()) + 
  scale_y_discrete(labels = function(x) str_remove(x, " County, Utah")) + 
  labs(title = "Median household income, 2019-2023 ACS",
       subtitle = "Counties in Utah",
       caption = "Data acquired with R and tidycensus. Error bars represent margin of error around estimates.",
       x = "ACS estimate",
       y = "") + 
  theme_minimal(base_size = 12)
```

---

```{r}
utah_plot_errorbar
```


# Exploring maps of ACS data

## "Spatial" ACS data

* One of the best features of tidycensus is the argument `geometry = TRUE`, which gets you the correct Census geometries with no hassle

* `get_acs()` with `geometry = TRUE` returns a _spatial_ Census dataset containing _simple feature geometries_

* __As of February 2025, the Census geographic shapefiles used by tidycensus have been taken offline__, so we'll be taking a look at some workarounds

## "Spatial" ACS data


```{r}
#| code-line-numbers: "|7"

cook_education <- get_acs(
  geography = "tract",
  variables = "DP02_0068P",
  state = "IL",
  county = "Cook",
  year = 2023
)
```
## Geometry workaround

* Corresponding geometries are available from the TigerWeb API, accessed with the {arcgislayers} package

```{r}
library(arcgislayers)

cook_geo <- arc_read("https://tigerweb.geo.census.gov/arcgis/rest/services/Generalized_ACS2023/Tracts_Blocks/MapServer/4", where = "COUNTY = '031' AND STATE = '17'")
```

---

* We get back a _simple features data frame_ (more about this on February 26th)

```{r}
cook_geo
```

## Tutorial: using TIGERweb

* Link: https://tigerweb.geo.census.gov/tigerwebmain/TIGERweb_main.html

## Spatial ACS data

* With the geometries in hand, we can merge the ACS data using `left_join()`

```{r}
library(dplyr)

cook_education_geo <- cook_geo %>%
  select(GEOID) %>%
  left_join(cook_education, by = "GEOID")

cook_education_geo
```


## Exploring spatial data

* Mapping, GIS, and spatial data is the subject of our February 26 workshop - so be sure to check that out!

* Even before we dive deeper into spatial data, it is _very_ useful to be able to explore your results on an interactive map

* Our solution: `mapview()`

## Exploring spatial data

```{r}
library(mapview)

mapview(cook_education_geo)
```

## Creating a shaded map with `zcol`

```{r}
mapview(cook_education_geo, zcol = "estimate")
```


## What about mapping 1-year ACS data?

* Typically it is difficult to map 1-year ACS data below the state level as your data will have gaps due to the population restrictions

## Example: "mapping" 1-year ACS data

```{r}
tx_education <- get_acs(
  geography = "county",
  variables = "DP02_0068P",
  state = "TX",
  year = 2023,
  survey = "acs1"
)

tx_counties <- arc_read("https://tigerweb.geo.census.gov/arcgis/rest/services/Generalized_ACS2023/State_County/MapServer/11", where = "STATE = '48'")

tx_geo <- left_join(tx_counties, tx_education, by = "GEOID")
```

## Example: "mapping" 1-year ACS data

```{r}
mapview(tx_geo, zcol = "estimate")
```



## Mapping small(er) areas with PUMAs

* Consider using Public Use Microdata Areas (PUMAs) for geographically-consistent substate mapping

* PUMAs are typically used for microdata geography; however, I find them quite useful to approximate real state submarkets, planning areas, etc.  

```{r}
tx_wfh <- get_acs(
  geography = "puma",
  variables = "DP03_0024P",
  state = "TX",
  survey = "acs1",
  year = 2023
)

tx_pumas <- arc_read("https://tigerweb.geo.census.gov/arcgis/rest/services/Generalized_TAB2020/PUMA_TAD_TAZ_UGA_ZCTA/MapServer/4", where = "STATE = '48'")

tx_geo <- left_join(tx_pumas, tx_wfh, by = "GEOID")
```


---

```{r}
library(mapview)

mapview(tx_geo, zcol = "estimate")
```



## Time-series analysis with the 1-year ACS: some notes

::: {.incremental}
* Variables in the Data Profile and Subject Tables can change names over time

* You'll need to watch out for the Connecticut issue and changing geographies

* The 2020 1-year ACS was not released (and is not in tidycensus), so your time-series can break if you are using iteration to pull data

:::


## Part 2 exercises

Swap in a variable from Part 1, `"B25077_001"` (median home value) for the analysis in this section, and try the following: 

* For a state of your choosing, how do margins of error differ among counties for median home values in the 1-year and 5-year ACS?

* Can you visualize trends in median home value for a county of your choosing using `mapview()`?

# Part 3: Working with ACS microdata

## What is "microdata?"  

* __Microdata__: individual-level survey responses made available to researchers 

* [The ACS Public Use Microdata Series (PUMS)](https://www.census.gov/programs-surveys/acs/microdata.html) allows for detailed cross-tabulations not available in aggregated data

* The 1-year PUMS covers about 1 percent of the US population; the 5-year PUMS covers about 5 percent (so, not the full ACS)

* Data downloads available [in bulk from the Census FTP server](https://www2.census.gov/programs-surveys/acs/data/pums/2023/5-Year/) or [from data.census.gov's MDAT tool](https://data.census.gov/mdat/#/search?ds=ACSPUMS5Y2023)

* Other resource for cleaned, time-series microdata: IPUMS

# Using microdata in tidycensus

## Basic usage of `get_pums()`

* `get_pums()` requires specifying one or more variables and the state for which you'd like to request data.  `state = 'all'` _can_ get data for the entire USA, but it takes a while!

* The function defaults to the 5-year ACS with `survey = "acs5"`; 1-year ACS data is available with `survey = "acs1"`. 

* The default year is 2023 in the latest version of tidycensus; data are available back to 2005 (1-year ACS) and 2005-2009 (5-year ACS). 2020 1-year data are not available.


## Basic usage of `get_pums()`

```{r first-call, results = 'hide'}
library(tidycensus)

la_pums <- get_pums(
  variables = c("SEX", "AGEP", "HHT"),
  state = "LA",
  survey = "acs1",
  year = 2023
)
```


```{r}
la_pums
```

---

## Understanding default data from `get_pums()`

`get_pums()` returns some technical variables by default without the user needing to request them specifically.  These include: 

* `SERIALNO`: a serial number that uniquely identifies households in the sample;

* `SPORDER`: the order of the person in the household; when combined with `SERIALNO`, uniquely identifies a person;

* `WGTP`: the household weight;

* `PWGTP`: the person weight

---

## Weights and ACS microdata

* Given that PUMS data are a _sample_ of the US population, the weights columns must be used for analysis

```{r tabulate}
library(tidyverse)

la_age_41 <- filter(la_pums, AGEP == 41)

print(sum(la_pums$PWGTP))
print(sum(la_age_41$PWGTP))
```

---

## Are these estimates accurate?

* PUMS weights are calibrated to population and household totals, so larger tabulations should align with published estimates

```{r check-louisiana}
get_acs("state", "B01003_001", state = "LA", survey = "acs1", year = 2023)
```

* Smaller tabulations will be characterized by more uncertainty, and may deviate from published estimates

---
class: middle, center, inverse

## Working with PUMS variables

---

## Variables available in the ACS PUMS

```{r view, eval = FALSE}
View(pums_variables)
```

* The `pums_variables` dataset is your one-stop shop for browsing variables in the ACS PUMS

* It is a long-form dataset that organizes specific _value codes_ by variable so you know what you can get.  You'll use information in the `var_code` column to fetch variables, but pay attention to the `var_label`, `val_code`, `val_label`, and `data_type` columns

---

## Recoding PUMS variables

* The `recode = TRUE` argument in `get_pums()` appends recoded columns to your returned dataset based on information available in `pums_variables`

---

```{r recode, results = 'hide'}
la_pums_recoded <- get_pums(
  variables = c("SEX", "AGEP", "HHT"),
  state = "LA",
  survey = "acs1",
  year = 2023,
  recode = TRUE
)
```

---

```{r show-recode}
la_pums_recoded
```

---

## Using variables filters

* PUMS datasets - especially from the 5-year ACS - can get quite large.  The `variables_filter` argument can return a subset of data from the API, reducing long download times

* `variables_filter` is specified as a _named list_ where the name represents the PUMS variable and the value represents a vector of values you are requesting from the API

## Using variables filters

```{r filter, results = 'hide'}
#| code-line-numbers: "|5-8"

la_pums_filtered <- get_pums(
  variables = c("SEX", "AGEP", "HHT"),
  state = "LA",
  survey = "acs5",
  variables_filter = list(
    SEX = 2,
    AGEP = 30:49
  ),
  year = 2023
)
```


---

```{r show-filter}
la_pums_filtered
```


## Working with PUMAs in PUMS data

* In the previous hour, you were introduced to PUMAs

* Public Use Microdata Areas (PUMAs) are the smallest available geographies at which records are identifiable in the PUMS datasets

* PUMAs are redrawn with each decennial US Census, and typically are home to 100,000-200,000 people. The 2023 ACS aligns with the 2020 PUMAs


## Working with PUMAs in PUMS data

* To get PUMA information in your output data, use the variable code `PUMA`

```{r get-pumas, results = 'hide'}
la_age_by_puma <- get_pums(
  variables = c("PUMA", "AGEP"),
  state = "LA",
  survey = "acs1",
  year = 2023
)
```

---

```{r show-pumas}
la_age_by_puma
```

# Handling uncertainty in tabulated PUMS estimates


## Uncertainty in PUMS data

* PUMS data represent a smaller sample than the regular ACS, so understanding error around tabulated estimates is critical

* [The Census Bureau recommends using _successive difference replication_](https://www2.census.gov/programs-surveys/acs/tech_docs/pums/ACS2019_2023_PUMS_README.pdf) to calculate standard errors, and provides _replicate weights_ to do this

* __tidycensus__ includes tools to help you get replicate weights and format your data for appropriate survey-weighted analysis

---

## Getting replicate weights

* We can acquire either housing or person replicate weights with the `rep_weights` argument

```{r la-rep-weights, results = 'hide'}
#| code-line-numbers: "|6"

la_pums_replicate <- get_pums(
  variables = c("AGEP", "PUMA"),
  state = "LA",
  survey = "acs1",
  year = 2023,
  rep_weights = "person" 
)

```

---

```{r or-rep-weights-show, eval = TRUE}
la_pums_replicate
```

---

## Handling complex survey samples

* __tidycensus__ links to the __survey__ and __srvyr__ packages for managing PUMS data as complex survey samples

* The `to_survey()` function will format your data with replicate weights for correct survey-weighted estimation

```{r la-to-survey}
la_survey <- to_survey(
  la_pums_replicate,
  type = "person"
)

class(la_survey)
```

## Survey-weighted tabulations

* __srvyr__ conveniently links R's survey infrastructure to familiar tidyverse-style workflows

* Standard errors can be multiplied by 1.645 to get familiar 90% confidence level margins of error

```{r}
library(srvyr)

la_survey %>%
  filter(AGEP == 41) %>%
  survey_count() %>%
  mutate(n_moe = n_se * 1.645)
```

## Group-wise survey data analysis

* A group-wise tidyverse workflow can be applied correctly by __srvyr__ for the calculation of medians and other summary statistics

```{r}
la_survey %>%
  group_by(PUMA) %>%
  summarize(median_age = survey_median(AGEP)) %>%
  mutate(median_age_moe = median_age_se * 1.645)
```


## Checking our answers

* Tabulated median ages are not identical to published estimates, but are very close

* Use published estimates if available; use PUMS data to generate estimates that aren't available in the published tables

```{r}
la_age_puma <- get_acs(
  geography = "puma",
  variables = "B01002_001",
  state = "LA",
  year = 2023,
  survey = "acs1"
)
```

# Thank you!
